#include <iostream>
#include <fstream>
#include <bitset>
#include <string>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <vector>
#include <algorithm>
#include <locale>
using namespace std;

const int IP[] = { 58, 50, 42, 34, 26, 18, 10, 2,
                   60, 52, 44, 36, 28, 20, 12, 4,
                   62, 54, 46, 38, 30, 22, 14, 6,
                   64, 56, 48, 40, 32, 24, 16, 8,
                   57, 49, 41, 33, 25, 17, 9, 1,
                   59, 51, 43, 35, 27, 19, 11, 3,
                   61, 53, 45, 37, 29, 21, 13, 5,
                   63, 55, 47, 39, 31, 23, 15, 7 };

const int IP_INV[] = { 40, 8, 48, 16, 56, 24, 64, 32,
                       39, 7, 47, 15, 55, 23, 63, 31,
                       38, 6, 46, 14, 54, 22, 62, 30,
                       37, 5, 45, 13, 53, 21, 61, 29,
                       36, 4, 44, 12, 52, 20, 60, 28,
                       35, 3, 43, 11, 51, 19, 59, 27,
                       34, 2, 42, 10, 50, 18, 58, 26,
                       33, 1, 41, 9, 49, 17, 57, 25 };

const int E[] = { 32, 1, 2, 3, 4, 5,
                  4, 5, 6, 7, 8, 9,
                  8, 9, 10, 11, 12, 13,
                  12, 13, 14, 15, 16, 17,
                  16, 17, 18, 19, 20, 21,
                  20, 21, 22, 23, 24, 25,
                  24, 25, 26, 27, 28, 29,
                  28, 29, 30, 31, 32, 1 };

const int P[] = { 16, 7, 20, 21, 29, 12, 28, 17,
                  1, 15, 23, 26, 5, 18, 31, 10,
                  2, 8, 24, 14, 32, 27, 3, 9,
                  19, 13, 30, 6, 22, 11, 4, 25 };

const int PC1[] = { 57, 49, 41, 33, 25, 17, 9,
                    1, 58, 50, 42, 34, 26, 18,
                    10, 2, 59, 51, 43, 35, 27,
                    19, 11, 3, 60, 52, 44, 36,
                    63, 55, 47, 39, 31, 23, 15,
                    7, 62, 54, 46, 38, 30, 22,
                    14, 6, 61, 53, 45, 37, 29,
                    21, 13, 5, 28, 20, 12, 4 };

const int PC2[] = { 14, 17, 11, 24, 1, 5,
                    3, 28, 15, 6, 21, 10,
                    23, 19, 12, 4, 26, 8,
                    16, 7, 27, 20, 13, 2,
                    41, 52, 31, 37, 47, 55,
                    30, 40, 51, 45, 33, 48,
                    44, 49, 39, 56, 34, 53,
                    46, 42, 50, 36, 29, 32 };

const int SHIFTS[] = { 1, 1, 2, 2, 2, 2, 2, 2,
                       1, 2, 2, 2, 2, 2, 2, 1 };

const int S_BOX[8][4][16] = {
    {
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
    },
    {
        {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
    },
    {
        {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
    },
    {
        {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
    },
    {
        {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
    },

    {
        {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
    },


    {
        {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
    },

    {
         {4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 2, 13, 7},
         { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
         { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
         { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
}
};


string hex_to_bin(string hex) {
    string bin = "";
    for (int i = 0; i < hex.length(); i++) {
        switch (hex[i]) {
        case '0': bin += "0000"; break;
        case '1': bin += "0001"; break;
        case '2': bin += "0010"; break;
        case '3': bin += "0011"; break;
        case '4': bin += "0100"; break;
        case '5': bin += "0101"; break;
        case '6': bin += "0110"; break;
        case '7': bin += "0111"; break;
        case '8': bin += "1000"; break;
        case '9': bin += "1001"; break;
        case 'A': bin += "1010"; break;
        case 'B': bin += "1011"; break;
        case 'C': bin += "1100"; break;
        case 'D': bin += "1101"; break;
        case 'E': bin += "1110"; break;
        case 'F': bin += "1111"; break;
        }
    }
    return bin;
}

string bin_to_hex(string bin) {
    string hex = "";
    for (int i = 0; i < bin.length(); i += 4) {
        int num = 0;
        if (bin[i] == '1') num += 8;
        if (bin[i + 1] == '1') num += 4;
        if (bin[i + 2] == '1') num += 2;
        if (bin[i + 3] == '1') num += 1;
        switch (num) {
        case 0: hex += "0"; break;
        case 1: hex += "1"; break;
        case 2: hex += "2"; break;
        case 3: hex += "3"; break;
        case 4: hex += "4"; break;
        case 5: hex += "5"; break;
        case 6: hex += "6"; break;
        case 7: hex += "7"; break;
        case 8: hex += "8"; break;
        case 9: hex += "9"; break;
        case 10: hex += "A"; break;
        case 11: hex += "B"; break;
        case 12: hex += "C"; break;
        case 13: hex += "D"; break;
        case 14: hex += "E"; break;
        case 15: hex += "F"; break;
        }
    }
    return hex;
}

string permute(string input, const int* table, int table_len) {
    string output = "";
    for (int i = 0; i < table_len; i++) {
        output += input[table[i] - 1];
    }
    return output;
}

string shift_left(string input, int num_shifts) {
    string output = input.substr(num_shifts) + input.substr(0, num_shifts);
    return output;
}

string xor_strings(string str1, string str2) {
    string output = "";
    for (int i = 0; i < str1.length(); i++) {
        if (str1[i] == str2[i]) {
            output += "0";
        }
        else {
            output += "1";
        }
    }
    return output;
}

string s_box(string input) {
    string output = "";
    for (int i = 0; i < 8; i++) {
        string row_str = input.substr(i * 6, 1) + input.substr(i * 6 + 5, 1);
        string col_str = input.substr(i * 6 + 1, 4);
        int row = bitset<2>(row_str).to_ulong();
        int col = bitset<4>(col_str).to_ulong();
        int val = S_BOX[i][row][col];
        output += bitset<4>(val).to_string();
    }
    return output;
}

string encrypt_block(string plaintext_block, string key) {
    // Initial permutation
    string permuted_block = permute(plaintext_block, IP, 64);

        // Split into left and right halves
        string left_half = permuted_block.substr(0, 32);
    string right_half = permuted_block.substr(32);

    // Perform 16 rounds of encryption
    for (int i = 0; i < 16; i++) {
        // Expand right half
        string expanded_half = permute(right_half, E, 48);

        // XOR with round key
        string round_key = permute(key, PC2, 48);
        round_key = shift_left(round_key.substr(0, 28), SHIFTS[i]) + shift_left(round_key.substr(28), SHIFTS[i]);
        round_key = permute(round_key, PC2, 48);
        string xor_output = xor_strings(expanded_half, round_key);

        // Apply S-boxes
        string s_box_output = s_box(xor_output);

        // Permute with P-box
        string p_box_output = permute(s_box_output, P, 32);

        // XOR with left half
        string new_right_half = xor_strings(left_half, p_box_output);

        // Update left and right halves for next round
        left_half = right_half;
        right_half = new_right_half;
    }

    // Combine left and right halves and perform final permutation
    string combined_half = right_half + left_half;
    string ciphertext_block = permute(combined_half, IP_INV, 64);

    return ciphertext_block;
}

string encrypt(string plaintext, string key) {
    // Convert plaintext and key to binary
    string plaintext_bin = hex_to_bin(plaintext);
    string key_bin = hex_to_bin(key);

    if (plaintext_bin.length() % 64 != 0) {
        string pad = string(64 - plaintext_bin.length() % 64, '0');
        plaintext_bin += pad;
    }

        // Encrypt each 64-bit block of plaintext
        string ciphertext = "";
    for (int i = 0; i < plaintext_bin.length(); i += 64) {
        string plaintext_block = plaintext_bin.substr(i, 64);
        string ciphertext_block = encrypt_block(plaintext_block, key_bin);
        ciphertext += ciphertext_block;
    }

    // Convert ciphertext to hexadecimal
    string ciphertext_hex = bin_to_hex(ciphertext);

    return ciphertext_hex;
}

string decrypt_block(string ciphertext_block, string key) {
    // Initial permutation
    string permuted_block = permute(ciphertext_block, IP, 64);

        // Split into left and right halves
        string left_half = permuted_block.substr(0, 32);
    string right_half = permuted_block.substr(32);

    // Perform 16 rounds of decryption (in reverse order)
    for (int i = 15; i >= 0; i--) {
        // Expand right half
        string expanded_half = permute(right_half, E, 48);

        // XOR with round key
        string round_key = permute(key, PC2, 48);
        round_key = shift_left(round_key.substr(0, 28), SHIFTS[i]) + shift_left(round_key.substr(28), SHIFTS[i]);
        round_key = permute(round_key, PC2, 48);
        string xor_output = xor_strings(expanded_half, round_key);

        // Apply S-boxes
        string s_box_output = s_box(xor_output);

        // Permute with P-box
        string p_box_output = permute(s_box_output, P, 32);

        // XOR with left half
        string new_right_half = xor_strings(left_half, p_box_output);

        // Update left and right halves for next round
        left_half = right_half;
        right_half = new_right_half;
    }

    // Combine left and right halves and perform final permutation
    string combined_half = right_half + left_half;
    string plaintext_block = permute(combined_half, IP_INV, 64);

    return plaintext_block;
}

string decrypt(string ciphertext, string key) {
    // Convert ciphertext and key to binary
    string ciphertext_bin = hex_to_bin(ciphertext);
    string key_bin = hex_to_bin(key);

        // Decrypt each 64-bit block of ciphertext
        string plaintext = "";
    for (int i = 0; i < ciphertext_bin.length(); i += 64) {
        string ciphertext_block = ciphertext_bin.substr(i, 64);
        string plaintext_block = decrypt_block(ciphertext_block, key_bin);
        plaintext += plaintext_block;
    }

    // Remove any padding from plaintext
    plaintext = plaintext.substr(0, plaintext.find_last_not_of('0') + 1);

    // Convert plaintext to hexadecimal
    string plaintext_hex = bin_to_hex(plaintext);

    return plaintext_hex;
}

int main() {
    // Установка локали для корректного отображения символов на русском языке
    setlocale(LC_ALL, "Russian");

    // Запрос ввода открытого текста у пользователя
    string plaintext;
    cout << "Введите текст для шифрования: ";
    getline(cin, plaintext);

    // Запрос ввода ключа у пользователя
    string key;
    cout << "Введите ключ: ";
    getline(cin, key);

    // Шифрование открытого текста
    string ciphertext = encrypt(plaintext, key);

    // Вывод зашифрованного текста на экран
    cout << "Зашифрованный текст: " << ciphertext << endl;

    // Расшифрование зашифрованного текста
    string decrypted_text = decrypt(ciphertext, key);

    // Вывод расшифрованного текста на экран
    cout << "Расшифрованный текст: " << decrypted_text << endl;

    return 0;
}
